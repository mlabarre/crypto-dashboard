<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Ajout de transactions</title>
    <script type="text/javascript" src="/javascripts/jquery-3.7.1.min.js"></script>
    <script type="text/javascript" src="/javascripts/utils.js"></script>
    <link rel='stylesheet' id="theme" href='/stylesheets/style.css'/>
    <style>
        .container {
            display: flex;
            flex-direction: column;
            align-content: center;
            align-items: center;
            justify-content: center;
        }

        .sub-container {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            flex-direction: column;
            width: 100%;
            min-width: 600px;
        }

        .input {
            padding: 10px 10px;
            background-color: cadetblue;
            margin: 10px 10px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
        }

        .button-box {
            display: flex;
            justify-content: center;
        }

        .col2 {
            display: flex;
            flex-flow: row;
            justify-content: space-between;
        }

        .hide {
            display: none;
        }

        .show {
            display: block;
        }

        .arrow {
            font-size: 40px;
            color: cadetblue;
        }

        .arrow-box {
            display: flex;
            align-items: center;
        }

        .top {
            margin-bottom: 30px;
        }

        .label-top {
            flex-direction: column;
        }

        body {
            color: black;
        }

        select {
            margin-left: 5px;
        }

        .select-right {
            margin-right: 10px;
        }

        #cancel {
            margin-right: 20px;
        }

        .info {
            color: antiquewhite;
            font-weight: lighter;
        }
    </style>
</head>
<body>

<div class="container">

    <div w3-include-html="/html/fr/header.html"></div>

    <div id="container" class="sub-container">

        <form id="form">

            <div class="input top">
                <label for="type">Type </label>
                <select name="type" id="type">
                    <option value="purchase">Achat</option>
                    <option value="sale">Vente</option>
                    <option value="swap">Swap</option>
                    <option value="send">Envoi</option>
                </select>
            </div>

            <!-- PURCHASE -->
            <div id="purchaseContainer" class="show">
                <div class="input">
                    <label for="purchaseDate">Date </label>
                    <input type="button" class="button-inline" onclick="setCurrentDate('purchase');" value="Maintenant">
                    <div>
                        <input type="date" name="purchaseDate" id="purchaseDate" required="required"
                               value="<%= purchaseDate %>">
                        <input type="time" name="purchaseTime" id="purchaseTime" step="1" value="<%= purchaseTime %>">
                    </div>
                </div>
                <div class="input">
                    <div>
                        <label for="purchaseTokenId">Token </label>
                        <select class="selectSymbolNode" id="purchaseTokenId" name="purchaseTokenId">
                            <option value="">Choisir</option>
                        </select>
                    </div>
                    <div>
                        <label for="purchaseTokenIdIco">ou si non list&eacute; * </label>
                        <input type="text" id="purchaseTokenIdIco" name="purchaseTokenIdIco">
                    </div>
                </div>
                <div class="input">
                    <label for="purchaseTokenNumber"># tokens&nbsp;&nbsp;&nbsp; </label>
                    <input type="number" name="purchaseTokenNumber" step="0.00000001"
                           value="<%= purchaseTokenNumber %>">
                </div>
                <div class="input">
                    <label for="purchaseTokenQuotationInFiat">Prix du token (<%= fiat_symbol %>) </label>
                    <input type="number" name="purchaseTokenQuotationInFiat" step="0.00000001"
                           value="<%= purchaseTokenQuotationInFiat %>">
                </div>
                <div class="input">
                    <label for="purchaseFeeInFiat">Frais (<%= fiat_symbol %>) </label>
                    <input type="number" name="purchaseFeeInFiat" step="0.01" value="<%= purchaseFeeInFiat %>">
                </div>
                <div class="input">
                    <label for="purchaseWallet">Wallet </label>
                    <select class="selectWalletNode" name="purchaseWallet" id="purchaseWallet">
                    </select>
                </div>
            </div>

            <!-- SALE -->
            <div id="saleContainer" class="hide">
                <div class="input">
                    <label for="saleDate">Date </label>
                    <input type="button" class="button-inline" onclick="setCurrentDate('sale');" value="Maintenant">
                    <div>
                        <input type="date" name="saleDate" id="saleDate" value="<%= saleDate %>">
                        <input type="time" name="saleTime" id="saleTime" step="1" value="<%= saleTime %>">
                    </div>
                </div>
                <div class="input">
                    <div>
                        <label for="saleTokenId">Token </label>
                        <select class="selectSymbolNode" id="saleTokenId" name="saleTokenId">
                            <option value="">Choisir</option>
                        </select>
                    </div>
                    <div>
                        <label for="saleTokenIdIco">ou si non list&eacute; * </label>
                        <input type="text" id="saleTokenIdIco" name="saleTokenIdIco">
                    </div>
                </div>
                <div class="input">
                    <label for="saleTokenNumber"># tokens&nbsp;&nbsp;&nbsp;</label>
                    <input type="number" name="saleTokenNumber" id="saleTokenNumber" step="0.00000001"
                           value="<%= saleTokenNumber %>">
                </div>
                <div class="input">
                    <label for="saleTokenQuotationInFiat">Prix du token (<%= fiat_symbol %>) </label>
                    <input type="number" name="saleTokenQuotationInFiat" id="saleTokenQuotationInFiat"
                           step="0.00000001" value="<%= saleTokenQuotationInFiat %>">
                </div>
                <div class="input">
                    <label for="saleFeeInFiat">Frais (<%= fiat_symbol %>) </label>
                    <input type="number" name="saleFeeInFiat" step="0.01" value="<%= saleFeeInFiat %>">
                </div>
                <div class="input">
                    <label for="saleWallet ">Wallet </label>
                    <select class="selectWalletNode" name="saleWallet" id="saleWallet">
                    </select>
                </div>
            </div>

            <!-- SWAP -->
            <div id="swapContainer" class="hide">
                <div class="input">
                    <label for="swapDate">Date </label>
                    <input type="button" class="button-inline" onclick="setCurrentDate('swap');" value="Maintenant">
                    <div>
                        <input type="date" name="swapDate" id="swapDate" value="<%= swapDate %>">
                        <input type="time" name="swapTime" id="swapTime" step="1" value="<%= swapTime %>">
                    </div>
                </div>
                <div class="col2">
                    <!-- Output of swap -->
                    <div>
                        <div class="input">
                            <div>
                                <label for="swapOutputTokenId">Token </label>
                                <select class="selectSymbolNode select-right" id="swapOutputTokenId" name="swapOutputTokenId">
                                    <option value="">Choisir</option>
                                </select>
                            </div>
                            <div>
                                <label for="swapOutputTokenIdIco">ou si non list&eacute; *</label>
                                <input type="text" id="swapOutputTokenIdIco" name="swapOutputTokenIdIco">
                            </div>
                        </div>
                        <div class="input">
                            <label for="swapOutputTokenNumber"># tokens&nbsp;&nbsp;&nbsp;</label>
                            <input type="number" name="swapOutputTokenNumber" step="0.00000001"
                                   value="<%= swapOutputTokenNumber %>">
                        </div>
                        <div class="input">
                            <label for="swapOutputTokenQuotation">Cotation </label>
                            <input type="number" name="swapOutputTokenQuotation" step="0.00000001"
                                   value="<%= swapOutputTokenQuotation %>">
                        </div>
                        <div class="input">
                            <label for="swapOutputTokenQuotationCurrency">Devise cotation &nbsp;&nbsp;&nbsp;</label>
                            <input type="text" name="swapOutputTokenQuotationCurrency"
                                   value="<%= swapOutputTokenQuotationCurrency %>">
                        </div>
                    </div>
                    <div class="arrow-box">
                        <span class="arrow">&#9654;</span>
                    </div>
                    <!-- Input of swap -->
                    <div>
                        <div class="input">
                            <div>
                                <label for="swapInputTokenId">Token </label>
                                <select class="selectSymbolNode select-right" id="swapInputTokenId" name="swapInputTokenId">
                                    <option value="">Choisir</option>
                                </select>
                            </div>
                            <div>
                                <label for="swapInputTokenIdIco">ou si non list&eacute; * </label>
                                <input type="text" id="swapInputTokenIdIco" name="swapInputTokenIdIco">
                            </div>
                        </div>
                        <div class="input">
                            <label for="swapInputTokenNumber"># tokens &nbsp;&nbsp;&nbsp;</label>
                            <input type="number" name="swapInputTokenNumber" step="0.00000001"
                                   value="<%= swapInputTokenNumber %>">
                        </div>
                        <div class="input">
                            <label for="swapInputTokenQuotation">Cotation </label>
                            <input type="number" name="swapInputTokenQuotation" step="0.00000001"
                                   value="<%= swapInputTokenQuotation %>">
                        </div>
                        <div class="input">
                            <label for="swapInputTokenQuotationCurrency">Devise cotation &nbsp;&nbsp;&nbsp;</label>
                            <input type="text" name="swapInputTokenQuotationCurrency"
                                   value="<%= swapInputTokenQuotationCurrency %>">
                        </div>

                    </div>
                </div>

                <div>
                    <div class="input">
                        <label for="swapFee">Frais </label>
                        <input type="number" name="swapFee" step="0.00000001" value="<%= swapFee %>">
                    </div>
                    <div class="input">
                        <label for="swapFeeCurrencyOpt">Devise </label>
                        <input type="text" name="swapFeeCurrencyOpt" value="<%= swapFeeCurrencyOpt %>">
                    </div>
                    <div class="input">
                        <label for="swapWallet">Wallet </label>
                        <select class="selectWalletNode" name="swapWallet" id="swapWallet">
                        </select>
                    </div>
                </div>
            </div>

            <!-- SEND so RECEIVE -->
            <div id="sendContainer" class="hide">
                <div class="input">
                    <label for="sendDate">Date </label>
                    <input type="button" class="button-inline" onclick="setCurrentDate('send');" value="Maintenant">
                    <div>
                        <input type="date" name="sendDate" id="sendDate" value="<%= sendDate %>">
                        <input type="time" name="sendTime" id="sendTime" step="1" value="<%= sendTime %>">
                    </div>
                </div>
                <div class="input">
                    <div>
                        <label for="sendTokenId">Token </label>
                        <select class="selectSymbolNode" id="sendTokenId" name="sendTokenId">
                            <option value="">Choisir</option>
                        </select>
                    </div>
                    <div>
                        <label for="sendTokenIdIco">ou si non list&eacute; *</label>
                        <input type="text" id="sendTokenIdIco" name="sendTokenIdIco">
                    </div>
                </div>
                <div class="col2">
                    <div>
                        <div class="input">
                            <label for="sendTokenNumber"># Tokens &nbsp;&nbsp;&nbsp;</label>
                            <input type="number" name="sendTokenNumber" step="0.00000001"
                                   value="<%= sendTokenNumber %>">
                        </div>
                        <div class="input">
                            <label for="sendWallet">Wallet </label>
                            <select class="selectWalletNode" name="sendWallet" id="sendWallet">
                            </select>
                        </div>
                    </div>
                    <div class="arrow-box">
                        <span class="arrow">&#9654;</span>
                    </div>
                    <div>
                        <div class="input">
                            <label for="receiveTokenNumber"># Tokens &nbsp;&nbsp;&nbsp;</label>
                            <input type="number" name="receiveTokenNumber" step="0.00000001"
                                   value="<%= receiveTokenNumber %>">
                        </div>
                        <div class="input">
                            <label for="receiveWallet">Wallet </label>
                            <select class="selectWalletNode" name="receiveWallet" id="receiveWallet">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="input">
                    <label for="sendFee">Frais en tokens </label>
                    <input type="number" name="sendFee" step="0.00000001" value="<%= sendFee %>">
                </div>
                <div class="input">
                    <label for="sendFeeCurrencyOpt">Devise des frais </label>
                    <input type="text" name="sendFeeCurrencyOpt" step="0.00000001" value="<%= sendFeeCurrencyOpt %>">
                </div>
                <div class="input">
                    <label for="sendCounterpart">Contre-partie en <%= fiat_symbol %> </label>
                    <input type="number" name="sendCounterpart" step="0.01" value="<%= sendCounterpart %>">
                </div>

            </div>

            <div class="input label-top">
                <label for="comment">Commentaire</label>
                <textarea id="comment" name="comment" rows="3" cols="60"><%= comment %></textarea>
            </div>
            <div>
                <span class="info">(*) Pour ICO, etc.</span>
            </div>
            <div class="button-box">
                <input class="button" type="button" name="cancel" id="cancel" value="Annuler">
                <input class="button" type="button" name="validation" id="validation" value="Valider">
            </div>

            <div>
                <span id="message"></span>
            </div>
        </form>
    </div>
</div>

<script>

    let typeTransaction = "<%= type %>";
    let trid = "<%= trid %>"
    let sortDirection = "<%= sortDirection %>"
    let token = "<%= token %>"
    let wallet = "<%= wallet %>"
    let lang = "<%= lang %>"
    let wallets = [];
    let symbols = [];
    let purchaseTokenId = "<%= purchaseTokenId %>";
    let purchaseWallet = "<%= purchaseWallet %>";
    let saleTokenId = "<%= saleTokenId %>";
    let saleWallet = "<%= saleWallet %>";
    let swapOutputTokenId = "<%= swapOutputTokenId %>";
    let swapInputTokenId = "<%= swapInputTokenId %>";
    let swapWallet = "<%= swapWallet %>";
    let sendTokenId = "<%= sendTokenId %>";
    let sendWallet = "<%= sendWallet %>";
    let receiveWallet = "<%= receiveWallet %>";

    let setCurrentDate = (type) => {
        let d = new Date();
        if (type === "purchase") {
            document.querySelector('#purchaseDate').value = getDateFromDate(d);
            document.querySelector('#purchaseTime').value = getTimeFromDate(d);
        } else if (type === "sale") {
            document.querySelector('#saleDate').value = getDateFromDate(d);
            document.querySelector('#saleTime').value = getTimeFromDate(d);
        } else if (type === "swap") {
            document.querySelector('#swapDate').value = getDateFromDate(d);
            document.querySelector('#swapTime').value = getTimeFromDate(d);
        } else if (type === "send") {
            document.querySelector('#sendDate').value = getDateFromDate(d);
            document.querySelector('#sendTime').value = getTimeFromDate(d);
        }
    }

    let buildSelectWallets = async (data) => {
        let options = "";
        $.each(data, (item) => {
            options += `<option value="${data[item].wallet}">${data[item].wallet}</option>`;
            wallets.push(data[item].wallet);
        });
        $('.selectWalletNode').append(options);
    }

    let buildSelectSymbols = async (data) => {
        let options = "";
        $.each(data, (item) => {
            options += `<option value="${data[item].symbol.toUpperCase()}">${data[item].symbol.toUpperCase()}</option>`;
            symbols.push(data[item].symbol.toUpperCase());
        });
        $('.selectSymbolNode').append(options);
    }

    let hideAll = () => {
        $('#purchaseContainer').hide();
        $('#saleContainer').hide();
        $('#swapContainer').hide();
        $('#sendContainer').hide();
    }

    let validateTokenId = (prefix) => {
        let msg = '';
        let res = false;
        if (prefix === "purchase" || prefix === "sale" || prefix === "send") {
            let tid = $('#' + prefix + 'TokenId').val();
            let tidico = $('#' + prefix + 'TokenIdIco').val();
            res = !((tid === '' && tidico === '') || (tid !== '' && tidico !== ''));
        } else {
            let outputtid = $('#' + prefix + 'OutputTokenId').val();
            let outputtidico = $('#' + prefix + 'OutputTokenIdIco').val();
            let inputtid = $('#' + prefix + 'InputTokenId').val();
            let inputtidico = $('#' + prefix + 'InputTokenIdIco').val();
            res = !((outputtid === '' && outputtidico === '') || (outputtid !== '' && outputtidico !== '') ||
                (inputtid === '' && inputtidico === '') || (inputtid !== '' && inputtidico !== ''));
        }
        if (!res) {
            msg = "Le choix du token est invalide. L'un des deux champs ne doit pas être renseigné"
        }
        return msg;
    }

    let validateFields = (prefix) => {
        let formData = document.querySelector(('form'));
        for (let i = 0; i < formData.length; i++) {
            if (formData[i].name.startsWith(prefix) && !formData[i].name.endsWith('Opt')) {
                if (formData[i].value === '' && formData[i].name.indexOf('TokenId') < 0) {
                    return 'Il manque au moins une valeur ou elle est invalide...';
                }
            }
        }
        return validateTokenId(prefix);
    }

    includeHTML("h-input").then( () => {
        handleDarkMode(document.getElementById('darkmode'));
    });

    let getWalletsName = () => {
        $.ajax(
            {
                type: "GET",
                url: "/api/get-wallets-name",
                contentType: "application/json; charset=utf-8"
            })
            .done((data) => {
                buildSelectWallets(data).then(() => {
                    initializeCombosWallet();
                });
            })
            .fail((error) => {
                $('#message').text('error');
            })
    }

    let getMySymbols = () => {
        $.ajax(
            {
                type: "GET",
                url: "/api/get-my-cryptos",
                contentType: "application/json; charset=utf-8"
            })
            .done((data) => {
                buildSelectSymbols(data).then(() => {
                    initializeCombosToken();
                });
            })
            .fail((error) => {
                $('#message').text(error);
            })
    }

    let setSelectedInComboWallets = (selectId, value) => {
        let index = wallets.indexOf(value);
        try {
            if (index >= 0) {
                document.querySelector('#' + selectId).selectedIndex = index;
            }
        } catch (e) {
            console.log(document.querySelector('#sendWallet'))
            console.log("error wallet selectId", selectId)
            console.log("error wallet value", value)

        }
    }

    let setSelectedInComboSymbols = (selectId, value, alternateFieldId) => {
        let index = symbols.indexOf(value);
        try {
            if (index >= 0) {
                document.querySelector('#' + selectId).selectedIndex = index + 1;
            } else {
                document.querySelector('#' + alternateFieldId).value = value;
            }
        } catch (e) {
            console.log("error symbol selectId", selectId)
            console.log("error symbol value", value)
        }
    }

    let selectType = () => {
        document.querySelector('#type').value = typeTransaction;
        const element = document.querySelector('#type')
        element.dispatchEvent(new Event("change"));
    }

    let initializeCombosWallet = () => {
        if (typeTransaction === "purchase") {
            setSelectedInComboWallets("purchaseWallet", purchaseWallet);
        } else if (typeTransaction === "sale") {
            setSelectedInComboWallets("saleWallet", saleWallet);
        } else if (typeTransaction === "swap") {
            setSelectedInComboWallets("swapWallet", swapWallet);
        } else if (typeTransaction === "send") {
            setSelectedInComboWallets("sendWallet", sendWallet);
            setSelectedInComboWallets("receiveWallet", receiveWallet);
        }
    }

    let initializeCombosToken = () => {
        if (typeTransaction === "purchase") {
            setSelectedInComboSymbols("purchaseTokenId", purchaseTokenId, "purchaseTokenIdIco");
        } else if (typeTransaction === "sale") {
            setSelectedInComboSymbols("saleTokenId", saleTokenId, "saleTokenIdIco");
        } else if (typeTransaction === "swap") {
            setSelectedInComboSymbols("swapOutputTokenId", swapOutputTokenId, "swapOutputTokenIdIco");
            setSelectedInComboSymbols("swapInputTokenId", swapInputTokenId, "swapInputTokenIdIco");
        } else if (typeTransaction === "send") {
            setSelectedInComboSymbols("sendTokenId", sendTokenId, "sendTokenIdIco");
        }
    }

    $(() => {
        document.querySelector('#type').addEventListener("change", (e) => {
            hideAll();
            let selectionType = document.querySelector('#type').value;
            if (selectionType === "purchase") {
                $('#purchaseContainer').show();
            } else if (selectionType === "sale") {
                $('#saleContainer').show();
            } else if (selectionType === "swap") {
                $('#swapContainer').show();
            } else if (selectionType === "send") {
                $('#sendContainer').show();
            }
        });
        if (trid === '') {
            $('#cancel').hide();
        }
        $('#cancel').on('click', () => {
            history.back();
        });
        $('#validation').on('click', () => {
            let type = document.getElementById('type');
            let msg = validateFields(type.value);
            if (msg !== '') {
                $('#message').text(msg);
            } else {
                $('#message').text('');
                let formData = document.querySelector(('form'));
                let fields = {};
                for (let i = 0; i < formData.length; i++) {
                    fields[formData[i].name] = formData[i].value;
                }
                let json = JSON.stringify(fields);
                if (trid === "") {
                    $.ajax(
                        {
                            type: "POST",
                            url: "/api/add-transaction",
                            contentType: "application/json; charset=utf-8",
                            data: json
                        })
                        .done((data) => {
                            alert(data);
                        })
                        .fail((error) => {
                            $('#message').text(error);
                        })
                } else {
                    $.ajax(
                        {
                            type: "PUT",
                            url: `/api/update-transaction?id=${trid}`,
                            contentType: "application/json; charset=utf-8",
                            data: json
                        })
                        .done((data) => {
                            // Updated : returns to transactions list
                            document.location.href = `/followTransactions?lang=fr&sortDirection=${sortDirection}&token=${token}` +
                                `&wallet=${wallet}`;
                        })
                        .fail((error) => {
                            $('#message').text(error);
                        })
                }
            }
        });
        getWalletsName();
        getMySymbols();
        selectType();
    })

</script>
</body>
</html>