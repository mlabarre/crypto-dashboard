<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Cryptos</title>
    <script type="text/javascript" src="/javascripts/jquery-3.7.1.min.js"></script>
    <script type="text/javascript" src="/javascripts/utils.js"></script>
    <link rel='stylesheet' id="theme" href='/stylesheets/style.css'/>
    <style>

        .container {
            display: flex;
            flex-direction: column;
            align-content: center;
            align-items: center;
            justify-content: center;
        }

        .subcontainer {
            display: flex;
            flex-wrap: wrap;
            flex-direction: column;
            flex-flow: row;
            justify-content: center;
        }

        .bloc {
            height: 1000px;
            overflow: hidden;
            margin-left: 20px;
        }

        .ctable {
            overflow-y: scroll;
            height: 1000px;
            display: block;
        }

        .button-box {
            display: flex;
            justify-content: center;
        }

        .action {
            cursor: pointer;
        }

        .filter {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            align-items: center;
        }

        .input {
            border-radius: 10px;
            display: flex;
            margin-right: 30px;
            height: 30px;
        }

        .button-filter {
            margin-top: 0;
            margin-right: 30px;
        }

        .message {
            display: flex;
            color: black;
        }

        .title-table {
            display: flex;
            justify-content: center;
            margin: 5px 5px;
        }

        .styled-table th,
        .styled-table td {
            padding: 4px 4px !important;
        }

    </style>
</head>
<body>

<form id="form">
    <div id="container" class="container">
        <div w3-include-html="/html/fr/header.html"></div>
        <div class="message">
            <span id="message">Chargement des cryptos en cours...</span>
        </div>
        <div class="filter cond">
            <input class="input" type="text" id="criteria" placeholder="Filtre">
            <button type="button" class="button button-filter" onclick="doFilter('all');">Filtrer sur tout</button>
            <button type="button" class="button button-filter" onclick="doFilter('symbol');">Filtrer sur le symbole</button>
            <button type="button" class="button button-filter" onclick="resetFilter();">Supprimer le filtre
            </button>
        </div>
        <div class="subcontainer">
            <div id="myCryptos">
                <div class="title-table"><span>Mes cryptos</span></div>
                <table id="myCryptosTable" class="styled-table">
                    <thead>
                    <th>Id</th>
                    <th>Symbole</th>
                    <th>Nom</th>
                    <th></th>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="button-box">
                    <input class="button" type="button" onclick="changeButtonList(this);return false;"
                           name="buttonList" id="buttonList" value="Afficher les cryptos dispo">
                </div>
            </div>
            <div id="availableCryptos" class="bloc cond">
                <div class="title-table"><span>Cryptos disponibles</span></div>
                <div class="bloc">
                    <table id="availableCryptosTable" class="styled-table ctable">
                        <thead>
                        <th></th>
                        <th>Id</th>
                        <th>Symbole</th>
                        <th>Nom</th>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</form>

<script>

    let availableCryptoShown = false;

    let myCryptosList = null;

    let availableCryptosList = null;

    let addMyCryptosRow = (row) => {
        let infoHtml = getInfoIconHtml(row);
        let r = `<tr><td>${infoHtml} ${row.id}</td><td>${row.symbol}</td><td>${row.name}</td><td class="action" ` +
            `onclick="suppressMyCrypto(this)"><span class="indic-moins" title="Supprimer de mes cryptos">-</span></td></tr>`
        $('#myCryptosTable').append(r);
    }

    let showInfo = (coinId) => {
        window.location = `/showTokenInfo?id=${coinId}&returnUrl=/cryptos&header=h-cryptos`;
    }

    let buildMyCryptos = () => {
        $('#myCryptosTable').find('tbody tr').remove();
        myCryptosList.sort(sortArray)
        for (let i = 0; i < myCryptosList.length; i++) {
            addMyCryptosRow(myCryptosList[i]);
        }
    }

    let getMyCryptos = async () => {
        return $.ajax({
            type: "GET",
            url: "/api/get-my-cryptos",
            contentType: "application/json; charset=utf-8"
        })
    }

    let findInFields = (criteria, child) => {
        let from = `${child[1].textContent} ${child[2].textContent} ${child[3].textContent}`;
        return from.toLowerCase().indexOf(criteria.toLowerCase()) < 0;
    }

    let doFilter = (type) => {
        let criteria = $('#criteria').val();
        $('#availableCryptosTable').find('tbody').find('tr').each((r, raw) => {
            if (type === "all") {
                raw.hidden = findInFields(criteria, raw.children) === true;
            } else {
                raw.hidden = raw.children[2].textContent.toLowerCase().indexOf(criteria.toLowerCase()) < 0;
            }
        })
    }

    let resetFilter = () => {
        $('#availableCryptosTable').find('tbody').find('tr').each((r, raw) => {
            raw.hidden = false;
        })
        $('#criteria').val("");
    }

    let addAvailableCryptosRow = async (row) => {
        let r = `<tr><td class="action" onclick="addMyCrypto(this)"><span class="indic-plus" ` +
            `title="Ajouter à mes cryptos">+</span></td><td id="id">${row.id}</td><td id="symbol">${row.symbol}</td>` +
            `<td id="name">${row.name}</td></tr>`
        $('#availableCryptosTable').append(r);
    }

    let removeMyCryptosFromAvailableCryptos = async () => {
        for (let i = 0; i < myCryptosList.length; i++) {
            let index = getIndexInArray(availableCryptosList, myCryptosList[i]);
            availableCryptosList.splice(index, 1);
        }
        return availableCryptosList;
    }

    let showMessage = () => {
        $('.message').css('color', 'white');
    }

    let hideMessage = () => {
        $('.message').css('color', 'black');
    }

    let buildAvailableCryptos = async () => {
        showMessage();
        availableCryptosList = await getAvailableCryptos();
        $('#availableCryptosTable').find('tbody tr').remove();
        await removeMyCryptosFromAvailableCryptos();
        for (let i = 0; i < availableCryptosList.length; i++) {
            await addAvailableCryptosRow(availableCryptosList[i]);
        }
        if ($('#criteria').val() !== "") {
            doFilter();
        }
        hideMessage();
    }

    let getAvailableCryptos = async () => {
        return $.ajax({
            type: "GET",
            url: "/api/get-available-cryptos",
            contentType: "application/json; charset=utf-8"
        })
    }

    let changeButtonList = (o) => {
        if (availableCryptoShown === true) {
            o.value = "Afficher les cryptos dispo";
            availableCryptoShown = false;
            $('.cond').hide();
        } else {
            buildAvailableCryptos(true).then(() => {
                o.value = "Cacher les cryptos dispo";
                availableCryptoShown = true;
                $('.cond').show();
            })
        }
    }

    let addToCollection = (crypto) => {
        return $.ajax({
            type: "POST",
            url: "/api/add-to-my-cryptos",
            contentType: "application/json; charset=utf-8",
            data: crypto
        })
    }

    let removeFromCollection = (crypto) => {
        return $.ajax({
            type: "DELETE",
            url: `/api/delete-from-my-cryptos?id=${crypto.id}&symbol=${crypto.symbol}&name=${crypto.name}`,
            contentType: "application/json; charset=utf-8"
        })
    }

    let addMyCrypto = (o) => {
        let children = o.closest("tr").children;
        let crypto = {"id": children[1].innerText, "symbol": children[2].innerText, "name": children[3].innerText}
        let index = getIndexInArray(availableCryptosList, crypto);
        if (index >= 0) {
            availableCryptosList.splice(index, 1);
            myCryptosList.push(crypto);
            addToCollection(JSON.stringify(crypto)).then((data) => {
                buildAvailableCryptos(false).then(() => {
                    buildMyCryptos();
                    alert(`Crypto ${crypto.name} ajoutée`)
                })
            }).fail((error) => {
                console.log(error)
            });
        } else {
            alert("Erreur. L'item n'existe pas dans availableCryptos")
        }
    }

    let suppressMyCrypto = (o) => {
        let children = o.closest("tr").children;
        let crypto = {"id": children[0].innerText, "symbol": children[1].innerText, "name": children[2].innerText}
        let indexAvailable = getIndexInArray(availableCryptosList, crypto);
        let indexMy = getIndexInArray(myCryptosList, crypto);
        if (indexAvailable >= 0) {
            alert("Erreur. Item existe déjà dans myCryptos : " + JSON.stringify(availableCryptosList[indexAvailable]));
        } else {
            myCryptosList.splice(indexMy, 1);
            removeFromCollection(crypto).then((data) => {
                buildAvailableCryptos(true).then(() => {
                    buildMyCryptos();
                })
            }).fail((error) => {
                console.log(error)
            });
        }
    }

    let init = () => {
        $('.cond').hide();
        getMyCryptos().then((data) => {
            myCryptosList = data;
            buildMyCryptos();
        });
        getAvailableCryptos().then((data) => {
            availableCryptosList = data;
        });
        return 1;
    }

    includeHTML("h-cryptos").then(() => {
        handleDarkMode(document.getElementById('darkmode'));
    });

    $(() => {
        init()
    })

</script>
</body>
</html>